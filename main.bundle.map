{"version":3,"sources":["webpack:///./src/$_gendir async","webpack:///./src/main.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/array-schema-colours/array-schema-colours.component.ts","webpack:///./src/app/data-changer/data-changer.component.ts","webpack:///./src/app/pyramid/pyramid.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/array-schema-colours/array-schema-colours.component.css","webpack:///./src/app/data-changer/data-changer.component.css","webpack:///./src/app/pyramid/pyramid.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/array-schema-colours/array-schema-colours.component.html","webpack:///./src/app/data-changer/data-changer.component.html","webpack:///./src/app/pyramid/pyramid.component.html"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 348;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/$$_gendir async\n// module id = 348\n// module chunks = 1","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { environment } from './environments/environment';\nimport { AppModule } from './app/app.module';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  public title = 'Gaap Test';\n\n  public toDisplay: number = 1;\n\n  public changeQuestion(question: number): void {\n    this.toDisplay = question;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { AppComponent } from './app.component';\nimport { PyramidComponent } from './pyramid/pyramid.component';\nimport { ArraySchemaColoursComponent } from './array-schema-colours/array-schema-colours.component';\nimport { DataChangerComponent } from './data-changer/data-changer.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PyramidComponent,\n    ArraySchemaColoursComponent,\n    DataChangerComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component } from '@angular/core';\n\n/**\n * Array schema interface for type security.\n */\nexport interface ArraySchema {\n  type: string;\n  value: number;\n  enabled: Boolean;\n}\n\n@Component({\n  selector: 'app-array-schema-colours',\n  templateUrl: './array-schema-colours.component.html',\n  styleUrls: ['./array-schema-colours.component.css']\n})\nexport class ArraySchemaColoursComponent {\n\n  /**\n   * Mock data to be used.\n   * @type { Array<ArraySchema> }\n   */\n  public colourSchema: Array<ArraySchema> = [\n    {type: 'Red', value: 1, enabled: true},\n    {type: 'Red', value: 1, enabled: true},\n    {type: 'Green', value: 1, enabled: true},\n    {type: 'Green', value: 1, enabled: true},\n    {type: 'Blue', value: 1, enabled: true},\n    {type: 'Blue', value: 1, enabled: true},\n    {type: 'Red', value: 1, enabled: true},\n    {type: 'Red', value: 1, enabled: true}\n  ];\n\n  /**\n   * Calculated array.\n   * @type { Array<ArraySchema> }\n   */\n  public calculateArray: Array<ArraySchema>;\n\n  /**\n   * Total calculated value\n   * @type { number }\n   */\n  public totalValue: number = 0;\n\n  /**\n   * When mock data should be used\n   */\n  public useMockData(): void {\n    this.calculateArray = null;\n    this.calculateArray = this.colourSchema;\n  }\n\n  /**\n   * Calculates the sum of the array.\n   */\n  public calculateSum(): void {\n    this.totalValue = 0;\n    this.calculateArray.forEach( (entry) => {\n      switch (entry.type) {\n        case 'Red' : {\n          entry.enabled ? this.totalValue += entry.value : this.totalValue = 0; // anything times 0 should be zero\n          break;\n        }\n        case 'Blue': {\n          entry.enabled ? this.totalValue -= entry.value : this.totalValue = 0; // anything times 0 should be zero\n          break;\n        }\n        case 'Green': {\n          entry.enabled ? this.totalValue *= entry.value : this.totalValue = 0; // anything times 0 should be zero\n          break;\n        }\n        default: {\n          // adding zero stays the same amount when no type is added.\n          this.totalValue ; // adding zero stays the same amount.\n          break;\n        }\n      }\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/array-schema-colours/array-schema-colours.component.ts","import { Component } from '@angular/core';\n\n/**\n * Data source interface for type security.\n */\nexport interface DataSource {\n  id: number;\n  name: string;\n  taxPercentage: number;\n  qty: number;\n  unitCostExcluding: number;\n  lineTotalExcluding: number;\n  lineTotalTax: number;\n  lineTotalIncluding: number;\n}\n\n@Component({\n  selector: 'app-data-changer',\n  templateUrl: './data-changer.component.html',\n  styleUrls: ['./data-changer.component.css']\n})\nexport class DataChangerComponent {\n\n  /**\n   * Array of changeable properties\n   * @type { Array<string> }\n   */\n  public allowedToChange = ['qty', 'unitCostExcluding',\n    'lineTotalExcluding', 'lineTotalIncluding'];\n\n  /**\n   * Selected Row number\n   * @type { number }\n   */\n  public rowNumber: number;\n\n  /**\n   * Array of unchangeable properties\n   * @type { Array<string> }\n   */\n  public toExclude: Array<string> = ['id', 'name', 'taxPercentage' , 'lineTotalTax'];\n\n  /**\n   * Change object.\n   * @type {selectedField: string, itemValue: number}\n   */\n  public changeObj: {selectedField: string, itemValue: number} = {selectedField: 'qty', itemValue: 0};\n\n  /**\n   * Mock data to be used.\n   * @type { Array<DataSource> }\n   */\n  public mockData: Array<DataSource> = [\n    {id: 1, name: 'coke', taxPercentage: 15, qty: 10, unitCostExcluding: 10,\n      lineTotalExcluding: 5, lineTotalTax: 5, lineTotalIncluding: 4},\n    {id: 2, name: 'pepsi', taxPercentage: 15, qty: 11, unitCostExcluding: 10,\n      lineTotalExcluding: 5, lineTotalTax: 5, lineTotalIncluding: 4},\n    {id: 3, name: 'sprite', taxPercentage: 15, qty: 12, unitCostExcluding: 10,\n      lineTotalExcluding: 5, lineTotalTax: 5, lineTotalIncluding: 4},\n    {id: 4, name: 'coke light', taxPercentage: 15, qty: 13, unitCostExcluding: 10,\n      lineTotalExcluding: 5, lineTotalTax: 5, lineTotalIncluding: 4},\n    {id: 5, name: 'coke zero', taxPercentage: 15, qty: 14, unitCostExcluding: 10,\n      lineTotalExcluding: 5, lineTotalTax: 5, lineTotalIncluding: 4},\n    {id: 6, name: 'cream soda', taxPercentage: 15, qty: 15, unitCostExcluding: 10,\n      lineTotalExcluding: 5, lineTotalTax: 5, lineTotalIncluding: 4},\n    {id: 7, name: '7up', taxPercentage: 15, qty: 16, unitCostExcluding: 10,\n      lineTotalExcluding: 5, lineTotalTax: 5, lineTotalIncluding: 4},\n    {id: 8, name: '7up light', taxPercentage: 15, qty: 17, unitCostExcluding: 10,\n      lineTotalExcluding: 5, lineTotalTax: 5, lineTotalIncluding: 4}\n  ];\n\n  /**\n   * Changes the value of the mockData table.\n   *\n   * @param { number } rowNumber\n   * @param { selectedField: string, itemValue: number} changeObj\n   */\n  public changeValues(rowNumber: number, changeObj: { selectedField: string, itemValue: number}): void {\n    if ( this.toExclude.indexOf(changeObj.selectedField) !== -1 || rowNumber > this.mockData.length) {\n      alert('Please try again, does not meet the minimum requirements');\n    } else {\n      this.mockData[rowNumber][changeObj.selectedField] = changeObj.itemValue;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/data-changer/data-changer.component.ts","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-pyramid',\n  templateUrl: './pyramid.component.html',\n  styleUrls: ['./pyramid.component.css']\n})\nexport class PyramidComponent {\n\n  /**\n   * Pyramid odd Array\n   * @type { Array<Array<number>> }\n   */\n  public pyramidOddArray: Array<Array<number>>;\n\n  /**\n   * Pyramid row number\n   * @type { number }\n   */\n  public pyramidRowNumber:number = 0;\n\n  /**\n   * Row number\n   * @type { number }\n   */\n  public rowNumber:number = 0;\n\n  /**\n   * Current Odd number placeholder\n   * @type { number }\n   */\n  public currentOdd: number;\n\n  /**\n   * Sum total\n   * @type { number }\n   */\n  public sumTotal: number;\n\n  /**\n   * Create the Pyramid Array.\n   */\n  public createPyramidArray(): void {\n    if (this.pyramidRowNumber < 1 ) {\n      alert('must enter row number');\n    } else {\n      this.pyramidOddArray = new Array();\n      this.currentOdd = 1;\n\n      for (let step = 0; step < this.pyramidRowNumber; step++) {\n        this.pyramidOddArray.push(this.createInnerArray(step));\n        this.currentOdd += 2;\n      }\n    }\n  }\n\n  /**\n   * Creates the internal array\n   *\n   * @param { number } entry\n   * @return { Array<number> }\n   */\n  public createInnerArray(entry: number): Array<number> {\n    let innerArray = [this.currentOdd];\n    for (let step = 0; step < entry; step++) {\n      innerArray.push(this.currentOdd += 2);\n    }\n    return innerArray;\n  }\n\n  /**\n   * Calculates the value of the row.\n   */\n  public sumOfRow(rowNumber: number): void {\n    // check if a value and right value is inserted\n    if (!rowNumber || this.pyramidOddArray.length + 1 <= rowNumber || this.pyramidOddArray.length + 1 < 0) {\n      alert('row number may not exceed ' + this.pyramidOddArray.length + ' or be less the 0');\n    } else {\n\n      // Actuall answer\n      const pyramidObj = this.pyramidOddArray[rowNumber - 1];\n      this.sumTotal = pyramidObj.reduce((a, b) => a + b, 0);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pyramid/pyramid.component.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = 618\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/array-schema-colours/array-schema-colours.component.css\n// module id = 619\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/data-changer/data-changer.component.css\n// module id = 620\n// module chunks = 1","module.exports = \".center-text{\\n  text-align: center;\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pyramid/pyramid.component.css\n// module id = 621\n// module chunks = 1","module.exports = \"<h1>\\n  {{title}}\\n</h1>\\n<button (click)=\\\"changeQuestion(1)\\\">Question 1</button>\\n<button (click)=\\\"changeQuestion(2)\\\">Question 2</button>\\n<button (click)=\\\"changeQuestion(3)\\\">Question 3</button>\\n<app-pyramid *ngIf=\\\"toDisplay === 1\\\"></app-pyramid>\\n<app-array-schema-colours *ngIf=\\\"toDisplay === 2\\\"></app-array-schema-colours>\\n<app-data-changer *ngIf=\\\"toDisplay === 3\\\" ></app-data-changer>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = 622\n// module chunks = 1","module.exports = \"<div>\\n  <div>Question two:</div>\\n  Given an array of data where each object has the schema of\\n  <div>type: string, value: number, enabled: Boolean</div>\\n  Write a function that takes the data as parameter, calculates and returns a summary value based on\\n  the following rules:\\n  <ol>\\n    <li>If type is Red and enabled add the value</li>\\n    <li>If type is Red and not enabled multiply by 0</li>\\n    <li>If type is Blue and enabled subtract the value</li>\\n    <li>If type is Blue and not enabled multiply by 0</li>\\n    <li>If type is Green and enabled multiply the value</li>\\n    <li>If type is Green and not enabled multiply by 0</li>\\n    <li>If type is None of the Above add 0</li>\\n  </ol>\\n</div>\\n\\n<div *ngIf=\\\"!calculateArray\\\">\\n  <button (click)=\\\"useMockData()\\\">Use mock data</button>\\n</div>\\n\\n<div *ngFor=\\\"let array of calculateArray\\\" >\\n  {{array | json}}\\n</div>\\n<div *ngIf=\\\"calculateArray\\\">\\n  <button (click)=\\\"calculateSum()\\\">Calculate sum of  data</button>\\n</div>\\n<div>\\n  Total : {{totalValue}}\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/array-schema-colours/array-schema-colours.component.html\n// module id = 623\n// module chunks = 1","module.exports = \"<div>\\n  <div>Question three:</div>\\n  Write a function that takes exactly 2 parameters, rowData and changedValue.\\n  the function should return rowData with recalculated values, based on the changedValue\\n  object.\\n  rowData schema:\\n  <div>id: number, name: string, taxPercentage: number, qty: number, unitCostExcluding: number,\\n    lineTotalExcluding: number, lineTotalTax: number, lineTotalIncluding: number</div>\\n  changedValue schema would be any of the fields above excluding id, name, taxPercentage and lineTotalTax\\n  with the new changed number: i.e: <div>qty: 5</div>\\n</div>\\n\\n\\n  <table>\\n    <tr>\\n      <th>Row</th>\\n      <th>ID</th>\\n      <th>NAME</th>\\n      <th>Tax Percentage</th>\\n      <th>QTY</th>\\n      <th>Unit Cost Excluding</th>\\n      <th>Line Total Excluding</th>\\n      <th>Line Total Tax</th>\\n      <th>Line Total Including</th>\\n    </tr>\\n    <tr *ngFor=\\\"let data of mockData; let indexNumber = index\\\" [attr.data-index]=\\\"indexNumber\\\">\\n      <td>{{indexNumber}}</td>\\n      <td>{{data.id}}</td>\\n      <td>{{data.name}}</td>\\n      <td>{{data.taxPercentage}}</td>\\n      <td>{{data.qty}}</td>\\n      <td>{{data.unitCostExcluding}}</td>\\n      <td>{{data.lineTotalExcluding}}</td>\\n      <td>{{data.lineTotalTax}}</td>\\n      <td>{{data.lineTotalIncluding}}</td>\\n    </tr>\\n  </table>\\n<select [(ngModel)]=\\\"changeObj.selectedField\\\">\\n  <option *ngFor=\\\"let data of allowedToChange\\\" [value]=\\\"data\\\" [selected]=\\\"data == changeObj?.selectedField\\\">{{data}}</option>\\n</select>\\n<input [(ngModel)]=\\\"rowNumber\\\"  placeholder=\\\"Row number\\\" type=\\\"number\\\" required>\\n<input [(ngModel)]=\\\"changeObj.itemValue\\\"  placeholder=\\\"Value to change\\\" type=\\\"number\\\" required>\\n<button *ngIf=\\\"changeObj.itemValue >= 0 && rowNumber <= mockData.length && changeObj.selectedField\\\" (click)=\\\"changeValues(rowNumber, changeObj)\\\">Submit changes</button>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/data-changer/data-changer.component.html\n// module id = 624\n// module chunks = 1","module.exports = \"<div>\\n  <div>Question one:</div>\\n  Given a pyramid of odd numbers starting with 1 at the top, write a function that takes any\\n    row number and returns the sum of that row.\\n</div>\\n\\n<div *ngIf=\\\"!pyramidOddArray\\\">\\n  Please input row amount.\\n  <input [(ngModel)]=\\\"pyramidRowNumber\\\" #ctrl=\\\"ngModel\\\" placeholder=\\\"Number of rows\\\" type=\\\"number\\\" required>\\n\\n  <button (click)=\\\"createPyramidArray()\\\">generate number</button>\\n\\n</div>\\n<div *ngIf=\\\"pyramidOddArray\\\">\\n  <div *ngFor=\\\"let oddArray of pyramidOddArray\\\" class=\\\"center-text\\\">\\n    {{ oddArray }}\\n  </div>\\n\\n  <input [(ngModel)]=\\\"rowNumber\\\" #ctrl=\\\"ngModel\\\" placeholder=\\\"row number to calculate\\\" type=\\\"number\\\" required>\\n\\n  <button (click)=\\\"sumOfRow(rowNumber)\\\">calculate row</button>\\n</div>\\n<div *ngIf=\\\"sumTotal\\\">\\n  Sum total\\n  {{sumTotal}}\\n</div>\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pyramid/pyramid.component.html\n// module id = 625\n// module chunks = 1"],"sourceRoot":""}